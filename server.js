

require('dotenv').config();
const express = require('express');
const oracledb = require('oracledb');
const bodyParser = require('body-parser');
const cors = require('cors');
const path = require('path');
const app = express();
const port = 3000;
const bcrypt = require('bcrypt');
const fs = require('fs').promises;





app.use(bodyParser.json());
app.use(cors());




app.use(bodyParser.urlencoded({ extended: true }));

app.use(express.json());
app.use(bodyParser.json());
app.use(express.static('public')); // Serve static files (HTML, CSS, JS)

app.use((req, res, next) => {
    console.log(`${req.method} ${req.path}`, {
        body: req.body,
        query: req.query,
        params: req.params
    });
    next();
});
// Database configuration
const dbConfig = {
    user: process.env.DB_USER || 'system',
    password: process.env.DB_PASSWORD || 'your_password',
    connectString: process.env.DB_CONNECT_STRING || 'localhost:1521/xe',
  
};

// const initializeDatabase = async () => {
//     try {
//         await oracledb.createPool({
//             poolAlias: 'default',
//             ...dbConfig
//         });
//         console.log('OracleDB Connection Pool Created');
//     } catch (error) {
//         console.error('Error creating OracleDB pool:', error);
//         process.exit(1);
//     }
// };




// Create sequences for auto-incrementing IDs
const createSequences = async (connection) => {
    try {
        const sequences = [
            'CREATE SEQUENCE Patient_Seq START WITH 1 INCREMENT BY 1',
            'CREATE SEQUENCE Doctor_Seq START WITH 1 INCREMENT BY 1',
            'CREATE SEQUENCE Room_Seq START WITH 1 INCREMENT BY 1',
            'CREATE SEQUENCE lab_tests_Seq START WITH 1 INCREMENT BY 1',
            'CREATE SEQUENCE Treatment_Seq START WITH 1 INCREMENT BY 1',
            'CREATE SEQUENCE Prescription_Seq START WITH 1 INCREMENT BY 1',
            'CREATE SEQUENCE Admission_Seq START WITH 1 INCREMENT BY 1',
            'CREATE SEQUENCE Appointment_Seq START WITH 1 INCREMENT BY 1',
            'CREATE SEQUENCE admins_seq START WITH 1 INCREMENT BY 1'
        ];

        for (const seq of sequences) {
            try {
                await connection.execute(seq);
            } catch (err) {
                if (!err.message.includes('ORA-00955')) {
                    throw err;
                }
            }
        }
    } catch (error) {
        console.error('Error creating sequences:', error);
    }
};

// [Previous createTables function remains the same]
// Create all required tables
const createTables = async () => {
    let connection;
    try {
        connection = await oracledb.getConnection(dbConfig);
        
        // Create User table
        await connection.execute(`
           CREATE TABLE admins (
    admin_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR2(50) NOT NULL,
    email VARCHAR2(100) UNIQUE NOT NULL,
    password VARCHAR2(100) NOT NULL
)
        
    `);

        // Create Doctor table
        await connection.execute(`
            CREATE TABLE Doctor (
                ID NUMBER PRIMARY KEY,
                Name VARCHAR2(100) NOT NULL,
                Specialization VARCHAR2(100) NOT NULL,
                Experience NUMBER,
                Contact VARCHAR2(50),
                Email VARCHAR2(100)
            )
        `);

        // Create Patient table
        await connection.execute(`
            CREATE TABLE Patient (
                ID NUMBER PRIMARY KEY,
                Name VARCHAR2(100) NOT NULL,
                Address VARCHAR2(200),
                Contact VARCHAR2(50),
                Email VARCHAR2(100)
            )
        `);

        // Create Room table
        await connection.execute(`
            CREATE TABLE Room (
                Numb NUMBER PRIMARY KEY,
                Type VARCHAR2(50) NOT NULL,
                Beds_avail NUMBER DEFAULT 1
            )
        `);

        // Create Test table
        await connection.execute(`
     CREATE TABLE lab_tests (
                    id NUMBER PRIMARY KEY,
                    test_name VARCHAR2(100) NOT NULL,
                    test_description VARCHAR2(500),
                    test_date DATE DEFAULT SYSDATE,
                    test_result VARCHAR2(100),
                    prescription_id NUMBER,
                    CONSTRAINT fk_prescription_lab
                        FOREIGN KEY (prescription_id)
                        REFERENCES prescription(id)
                )
        `);

        // Create Treatment table
        await connection.execute(`
            CREATE TABLE Treatment (
                ID NUMBER PRIMARY KEY,
                Dat TIMESTAMP,
                Name VARCHAR2(100) NOT NULL,
                Dosage VARCHAR2(100),
                prescriptionID NUMBER,
                FOREIGN KEY (prescriptionID) REFERENCES Prescription(ID),
            )
        `);

        // Create Prescription table
        await connection.execute(`
            CREATE TABLE Prescription (
                ID NUMBER PRIMARY KEY
            )
        `);

        // Create junction tables
        // await connection.execute(`
        //     CREATE TABLE Prescription_Treatment (
        //         Prescription_ID NUMBER,
        //         Treatment_ID NUMBER,
        //         PRIMARY KEY (Prescription_ID, Treatment_ID),
        //         FOREIGN KEY (Prescription_ID) REFERENCES Prescription(ID),
        //         FOREIGN KEY (Treatment_ID) REFERENCES Treatment(ID)
        //     )
        // `);

        // await connection.execute(`
        //     CREATE TABLE Prescription_Test (
        //         Prescription_ID NUMBER,
        //         Test_ID NUMBER,
        //         Important NUMBER(1) DEFAULT 0,
        //         PRIMARY KEY (Prescription_ID, Test_ID),
        //         FOREIGN KEY (Prescription_ID) REFERENCES Prescription(ID),
        //         FOREIGN KEY (Test_ID) REFERENCES Test(ID)
        //     )
        // `);

        await connection.execute(`
            CREATE TABLE Admission (
                ID NUMBER PRIMARY KEY,
                Patient_ID NUMBER,
                Room_Number NUMBER,
                Admit_date TIMESTAMP,
                Discharge_date TIMESTAMP,
                FOREIGN KEY (Patient_ID) REFERENCES Patient(ID),
                FOREIGN KEY (Room_Number) REFERENCES Room(Numb)
            )
        `);

        await connection.execute(`
            CREATE TABLE Appointment (
                ID NUMBER PRIMARY KEY,
                Prescription_ID NUMBER,
                Priority NUMBER,
                Patient_ID NUMBER,
                Doctor_ID NUMBER,
                Dat DATE,
                FOREIGN KEY (Prescription_ID) REFERENCES Prescription(ID),
                FOREIGN KEY (Patient_ID) REFERENCES Patient(ID),
                FOREIGN KEY (Doctor_ID) REFERENCES Doctor(ID)
            )
        `);

        console.log('All tables created successfully');
        await connection.commit();
    } catch (error) {
        console.error('Error creating tables:', error);
        // Don't throw error if tables already exist
        if (!error.message.includes('ORA-00955')) {
            throw error;
        }
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
};

app.post('/api/patients', async (req, res) => {
    const { name, address, contact, email } = req.body;
    let connection;

    try {
        connection = await oracledb.getConnection(dbConfig);
        const result = await connection.execute(
            `INSERT INTO Patient (ID, Name, Address, Contact, Email) 
             VALUES (Patient_Seq.NEXTVAL, :1, :2, :3, :4)
             RETURNING ID INTO :5`,
            [name, address, contact, email,
             { type: oracledb.NUMBER, dir: oracledb.BIND_OUT }],
            { autoCommit: true }
        );

        res.status(201).json({
            message: 'Patient added successfully',
            id: result.outBinds[0][0]
        });
    } catch (error) {
        console.error('Error adding patient:', error);
        res.status(500).json({ error: 'Failed to add patient' });
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
});

// Patients Routes
app.get('/api/patients', async (req, res) => {
    let connection;
    try {
        connection = await oracledb.getConnection(dbConfig);
        const result = await connection.execute(
            'SELECT * FROM Patient ORDER BY ID'
        );
        res.json(result.rows.map(row => ({
            id: row[0],
            name: row[1],
            address: row[2],
            contact: row[3],
            email: row[4]
        })));
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Failed to fetch patients' });
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
});


// Update patient
app.put('/api/patients/:id', async (req, res) => {
    const { id } = req.params;
    const { name, address, contact, email } = req.body;
    let connection;

    try {
        connection = await oracledb.getConnection(dbConfig);
        await connection.execute(
            `UPDATE Patient 
             SET Name = :1, Address = :2, Contact = :3, Email = :4 
             WHERE ID = :5`,
            [name, address, contact, email, id],
            { autoCommit: true }
        );

        res.json({ message: 'Patient updated successfully' });
    } catch (error) {
        console.error('Error updating patient:', error);
        res.status(500).json({ error: 'Failed to update patient' });
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
});

// Delete patient
app.delete('/api/patients/:id', async (req, res) => {
    const { id } = req.params;
    let connection;

    try {
        connection = await oracledb.getConnection(dbConfig);
        await connection.execute(
            'DELETE FROM Patient WHERE ID = :1',
            [id],
            { autoCommit: true }
        );

        res.json({ message: 'Patient deleted successfully' });
    } catch (error) {
        console.error('Error deleting patient:', error);
        res.status(500).json({ error: 'Failed to delete patient' });
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
});



app.post('/api/doctors', async (req, res) => {
    const { name, specialization, experience, contact, email } = req.body;
    let connection;

    // Input validation
    if (!name || !specialization || !experience || !contact || !email) {
        console.log('Missing required fields:', { name, specialization, experience, contact, email });
        return res.status(400).json({ 
            error: 'All fields are required',
            received: { name, specialization, experience, contact, email }
        });
    }

    try {
        connection = await oracledb.getConnection(dbConfig);
        console.log('Connected to database, executing insert...');

        // Convert experience to number if it's a string
        const experienceNum = parseInt(experience);

        const result = await connection.execute(
            `INSERT INTO Doctor (ID, Name, Specialization, Experience, Contact, Email) 
             VALUES (Doctor_Seq.NEXTVAL, :1, :2, :3, :4, :5)
             RETURNING ID INTO :6`,
            [name, specialization, experienceNum, contact, email, 
             { type: oracledb.NUMBER, dir: oracledb.BIND_OUT }],
            { autoCommit: true }
        );

        console.log('Insert successful:', result);

        const newId = result.outBinds[0][0];
        
        // Return the created doctor data
        res.status(201).json({
            message: 'Doctor added successfully',
            doctor: {
                id: newId,
                name,
                specialization,
                experience: experienceNum,
                contact,
                email
            }
        });
    } catch (error) {
        console.error('Database error:', error);
        
        // Check for specific database errors
        if (error.errorNum === 1) {
            return res.status(400).json({ 
                error: 'Database constraint violation',
                details: error.message 
            });
        }
        
        res.status(500).json({ 
            error: 'Failed to add doctor',
            details: error.message
        });
    } finally {
        if (connection) {
            try {
                await connection.close();
                console.log('Database connection closed');
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
});



app.get('/api/doctors', async (req, res) => {
    let connection;
    try {
        connection = await oracledb.getConnection(dbConfig);
        const result = await connection.execute(
            'SELECT * FROM Doctor ORDER BY ID'
        );
        res.json(result.rows.map(row => ({
            id: row[0],
            name: row[1],
            specialization: row[2],
            experience: row[3],
            contact: row[4],
            email: row[5]
        })));
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Failed to fetch doctors' });
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
});


app.get('/api/doctors/search', (req, res) => {
    const { term, filter } = req.query;

    const filteredDoctors = doctors.filter(doctor => {
        switch (filter) {
            case 'id':
                return doctor.id.toString() === term;
            case 'name':
                return doctor.name.toLowerCase().includes(term.toLowerCase());
            case 'specialization':
                return doctor.specialization.toLowerCase().includes(term.toLowerCase());
            default:
                return false;
        }
    });

    res.json(filteredDoctors);
});

// First, ensure you have a sequence for the ID
// CREATE SEQUENCE Doctor_Seq START WITH 1 INCREMENT BY 1;

// Update endpoint
app.put('/api/doctors/:id', async (req, res) => {
    const { id } = req.params;
    const { name, specialization, experience, contact, email } = req.body;
    let connection;

    try {
        connection = await oracledb.getConnection(dbConfig);
        console.log('Update request for doctor:', id, req.body); // Debug log

        const result = await connection.execute(
            `UPDATE Doctor 
             SET Name = :1,
                 Specialization = :2,
                 Experience = :3,
                 Contact = :4,
                 Email = :5
             WHERE ID = :6`,
            [name, specialization, experience, contact, email, id],
            { autoCommit: true }
        );

        console.log('Update result:', result); // Debug log

        if (result.rowsAffected > 0) {
            res.json({ 
                message: 'Doctor updated successfully',
                rowsAffected: result.rowsAffected 
            });
        } else {
            res.status(404).json({ 
                message: 'Doctor not found' 
            });
        }
    } catch (error) {
        console.error('Server error during update:', error);
        res.status(500).json({ 
            error: error.message 
        });
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
});

// Delete endpoint
app.delete('/api/doctors/:id', async (req, res) => {
    const { id } = req.params;
    let connection;

    try {
        connection = await oracledb.getConnection(dbConfig);
        console.log('Delete request for doctor:', id); // Debug log

        const result = await connection.execute(
            'DELETE FROM Doctor WHERE ID = :1',
            [id],
            { autoCommit: true }
        );

        console.log('Delete result:', result); // Debug log

        if (result.rowsAffected > 0) {
            res.json({ 
                message: 'Doctor deleted successfully',
                rowsAffected: result.rowsAffected 
            });
        } else {
            res.status(404).json({ 
                message: 'Doctor not found' 
            });
        }
    } catch (error) {
        console.error('Server error during delete:', error);
        res.status(500).json({ 
            error: error.message 
        });
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
});







// POST Route - Add Appointment
app.post('/api/appointments', async (req, res) => {
    const { id, prescriptionID, priority, patientID, doctorID, date } = req.body;
    let connection;

    try {
        connection = await oracledb.getConnection(dbConfig);

        const formattedDate = new Date(date).toISOString().slice(0, 19).replace('T', ' ');

        await connection.execute(
            `INSERT INTO Appointment (ID, Prescription_ID, Priority, Patient_ID, Doctor_ID, Dat) 
            VALUES (:1, :2, :3, :4, :5, TO_TIMESTAMP(:6, 'YYYY-MM-DD HH24:MI:SS'))`,
            [id, prescriptionID, priority, patientID, doctorID, formattedDate],
            { autoCommit: true }
        );

        res.status(201).json({
            message: 'Appointment added successfully',
            id: id,
        });
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Failed to add appointment' });
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
});


// GET - Fetch all Appointments
app.get('/api/appointments', async (req, res) => {
    let connection;

    try {
        connection = await oracledb.getConnection(dbConfig);
        const result = await connection.execute('SELECT * FROM Appointment ORDER BY ID');
        res.json(result.rows.map(row => ({
            id: row[0],
            prescriptionID: row[1],
            priority: row[2],
            patientID: row[3],
            doctorID: row[4],
            date: row[5].toISOString(),
        })));
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Failed to fetch appointments' });
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
});



// PUT - Update Appointment by ID
app.put('/api/appointments/:id', async (req, res) => {
    const appointmentId = req.params.id;
    const { id, prescriptionID, priority, patientID, doctorID, date } = req.body;
    let connection;

    try {
        connection = await oracledb.getConnection(dbConfig);

        const formattedDate = new Date(date).toISOString().slice(0, 19).replace('T', ' ');

        const result = await connection.execute(
            `UPDATE Appointment SET 
                ID = :1, 
                Prescription_ID = :2, 
                Priority = :3, 
                Patient_ID = :4, 
                Doctor_ID = :5, 
                Dat = TO_TIMESTAMP(:6, 'YYYY-MM-DD HH24:MI:SS') 
            WHERE ID = :7`,
            [id, prescriptionID, priority, patientID, doctorID, formattedDate, appointmentId],
            { autoCommit: true }
        );

        if (result.rowsAffected === 0) {
            return res.status(404).json({ error: 'Appointment not found' });
        }

        res.json({ message: 'Appointment updated successfully' });
    } catch (error) {
        console.error('Error updating appointment:', error);
        res.status(500).json({ error: 'Failed to update appointment' });
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
});


// DELETE - Delete Appointment by ID
app.delete('/api/appointments/:id', async (req, res) => {
    const appointmentId = req.params.id;
    let connection;

    try {
        connection = await oracledb.getConnection(dbConfig);
        const result = await connection.execute(
            `DELETE FROM Appointment WHERE ID = :1`,
            [appointmentId],
            { autoCommit: true }
        );

        if (result.rowsAffected === 0) {
            return res.status(404).json({ error: 'Appointment not found' });
        }

        res.json({ message: 'Appointment deleted successfully' });
    } catch (error) {
        console.error('Error deleting appointment:', error);
        res.status(500).json({ error: 'Failed to delete appointment' });
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
});


// Rooms Routes
app.post('/api/rooms', async (req, res) => {
    const { number, type, bedsAvail } = req.body;
    let connection;

    try {
        connection = await oracledb.getConnection(dbConfig);
        await connection.execute(
            `INSERT INTO Room (Numb, Type, Beds_avail) 
             VALUES (:1, :2, :3)`,
            [number, type, bedsAvail],
            { autoCommit: true }
        );

        res.status(201).json({
            message: 'Room added successfully',
            number: number
        });
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Failed to add room' });
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
});

app.get('/api/rooms', async (req, res) => {
    let connection;
    try {
        connection = await oracledb.getConnection(dbConfig);
        const result = await connection.execute(
            'SELECT * FROM Room ORDER BY Numb'
        );
        res.json(result.rows.map(row => ({
            number: row[0],
            type: row[1],
            bedsAvail: row[2]
        })));
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Failed to fetch rooms' });
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
});

// PUT - Update room by number
app.put('/api/rooms/:number', async (req, res) => {
    const roomNumber = req.params.number;
    const { type, bedsAvail } = req.body;
    let connection;

    try {
        connection = await oracledb.getConnection(dbConfig);

        // Update the room details
        const result = await connection.execute(
            `UPDATE Room 
             SET Type = :1, Beds_avail = :2
             WHERE Numb = :3`,
            [type, bedsAvail, roomNumber],
            { autoCommit: true }
        );

        if (result.rowsAffected === 0) {
            return res.status(404).json({ error: 'Room not found' });
        }

        res.json({ message: 'Room updated successfully' });
    } catch (error) {
        console.error('Error updating room:', error);
        res.status(500).json({ error: 'Failed to update room' });
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
});

// DELETE - Delete room by number
app.delete('/api/rooms/:number', async (req, res) => {
    const roomNumber = req.params.number;
    let connection;

    try {
        connection = await oracledb.getConnection(dbConfig);

        // Delete the room from the Room table
        const result = await connection.execute(
            `DELETE FROM Room WHERE Numb = :1`,
            [roomNumber],
            { autoCommit: true }
        );

        if (result.rowsAffected === 0) {
            return res.status(404).json({ error: 'Room not found' });
        }

        res.json({ message: 'Room deleted successfully' });
    } catch (error) {
        console.error('Error deleting room:', error);
        res.status(500).json({ error: 'Failed to delete room' });
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
});

//crud operation for prescription

// Prescription Routes

// POST - Add a new Prescription
app.post('/api/prescriptions', async (req, res) => {
    const { id } = req.body;
    let connection;

    try {
        connection = await oracledb.getConnection(dbConfig);
        await connection.execute(
            `INSERT INTO Prescription (ID) VALUES (:1)`,
            [id],
            { autoCommit: true }
        );

        res.status(201).json({
            message: 'Prescription added successfully',
            id: id
        });
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Failed to add prescription' });
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
});

// GET - Fetch all Prescriptions
app.get('/api/prescriptions', async (req, res) => {
    let connection;

    try {
        connection = await oracledb.getConnection(dbConfig);
        const result = await connection.execute(
            'SELECT * FROM Prescription ORDER BY ID'
        );
        res.json(result.rows.map(row => ({
            id: row[0]
        })));
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Failed to fetch prescriptions' });
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
});

// PUT - Update Prescription by ID
app.put('/api/prescriptions/:id', async (req, res) => {
    const prescriptionId = req.params.id;
    const { id } = req.body;
    let connection;

    try {
        connection = await oracledb.getConnection(dbConfig);

        // Update the prescription details
        const result = await connection.execute(
            `UPDATE Prescription SET ID = :1 WHERE ID = :2`,
            [id, prescriptionId],
            { autoCommit: true }
        );

        if (result.rowsAffected === 0) {
            return res.status(404).json({ error: 'Prescription not found' });
        }

        res.json({ message: 'Prescription updated successfully' });
    } catch (error) {
        console.error('Error updating prescription:', error);
        res.status(500).json({ error: 'Failed to update prescription' });
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
});

// DELETE - Delete Prescription by ID
app.delete('/api/prescriptions/:id', async (req, res) => {
    const prescriptionId = req.params.id;
    let connection;

    try {
        connection = await oracledb.getConnection(dbConfig);

        // Delete the prescription from the Prescription table
        const result = await connection.execute(
            `DELETE FROM Prescription WHERE ID = :1`,
            [prescriptionId],
            { autoCommit: true }
        );

        if (result.rowsAffected === 0) {
            return res.status(404).json({ error: 'Prescription not found' });
        }

        res.json({ message: 'Prescription deleted successfully' });
    } catch (error) {
        console.error('Error deleting prescription:', error);
        res.status(500).json({ error: 'Failed to delete prescription' });
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
});



// POST Route
app.post('/api/treatments', async (req, res) => {
    const { id, date, name, dosage, prescriptionID } = req.body;
    let connection;

    try {
        connection = await oracledb.getConnection(dbConfig);

        // Convert date to timestamp format for Oracle
        const formattedDate = new Date(date).toISOString().slice(0, 19).replace('T', ' '); // 'YYYY-MM-DD HH:MM:SS'

        await connection.execute(
            `INSERT INTO Treatment (ID, Dat, Name, Dosage, prescriptionID) VALUES (:1, TO_TIMESTAMP(:2, 'YYYY-MM-DD HH24:MI:SS'), :3, :4, :5)`,
            [id, formattedDate, name, dosage, prescriptionID],
            { autoCommit: true }
        );

        res.status(201).json({
            message: 'Treatment added successfully',
            id: id,
        });
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Failed to add treatment' });
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
});

// GET - Fetch all Treatments
app.get('/api/treatments', async (req, res) => {
    let connection;

    try {
        connection = await oracledb.getConnection(dbConfig);
        const result = await connection.execute('SELECT * FROM Treatment ORDER BY ID');
        res.json(result.rows.map(row => ({
            id: row[0],
            date: row[1].toISOString(), // Ensure the date is formatted in ISO
            name: row[2],
            dosage: row[3],
            prescriptionID: row[4],
        })));
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Failed to fetch treatments' });
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
});

// PUT - Update Treatment by ID
app.put('/api/treatments/:id', async (req, res) => {
    const treatmentId = req.params.id;
    const { id, date, name, dosage, prescriptionID } = req.body;
    let connection;

    try {
        connection = await oracledb.getConnection(dbConfig);

        const formattedDate = new Date(date).toISOString().slice(0, 19).replace('T', ' '); // 'YYYY-MM-DD HH:MM:SS'

        const result = await connection.execute(
            `UPDATE Treatment SET ID = :1, Dat = TO_TIMESTAMP(:2, 'YYYY-MM-DD HH24:MI:SS'), Name = :3, Dosage = :4, prescriptionID = :5 WHERE ID = :6`,
            [id, formattedDate, name, dosage, prescriptionID, treatmentId],
            { autoCommit: true }
        );

        if (result.rowsAffected === 0) {
            return res.status(404).json({ error: 'Treatment not found' });
        }

        res.json({ message: 'Treatment updated successfully' });
    } catch (error) {
        console.error('Error updating treatment:', error);
        res.status(500).json({ error: 'Failed to update treatment' });
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
});

// DELETE - Delete Treatment by ID
app.delete('/api/treatments/:id', async (req, res) => {
    const treatmentId = req.params.id;
    let connection;

    try {
        connection = await oracledb.getConnection(dbConfig);
        const result = await connection.execute(
            `DELETE FROM Treatment WHERE ID = :1`,
            [treatmentId],
            { autoCommit: true }
        );

        if (result.rowsAffected === 0) {
            return res.status(404).json({ error: 'Treatment not found' });
        }

        res.json({ message: 'Treatment deleted successfully' });
    } catch (error) {
        console.error('Error deleting treatment:', error);
        res.status(500).json({ error: 'Failed to delete treatment' });
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
});

// POST Route - Add Admission
app.post('/api/admissions', async (req, res) => {
    const { id, patientID, roomNumber, admitDate, dischargeDate } = req.body;
    let connection;

    try {
        connection = await oracledb.getConnection(dbConfig);

        const formattedAdmitDate = new Date(admitDate).toISOString().slice(0, 19).replace('T', ' ');
        const formattedDischargeDate = dischargeDate ? new Date(dischargeDate).toISOString().slice(0, 19).replace('T', ' ') : null;

        await connection.execute(
            `INSERT INTO Admission (ID, Patient_ID, Room_Number, Admit_date, Discharge_date) 
            VALUES (:1, :2, :3, TO_TIMESTAMP(:4, 'YYYY-MM-DD HH24:MI:SS'), 
            ${formattedDischargeDate ? "TO_TIMESTAMP(:5, 'YYYY-MM-DD HH24:MI:SS')" : "NULL"})`,
            formattedDischargeDate ? [id, patientID, roomNumber, formattedAdmitDate, formattedDischargeDate] : [id, patientID, roomNumber, formattedAdmitDate],
            { autoCommit: true }
        );

        res.status(201).json({
            message: 'Admission added successfully',
            id: id,
        });
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Failed to add admission' });
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
});

// GET - Fetch all Admissions
app.get('/api/admissions', async (req, res) => {
    let connection;

    try {
        connection = await oracledb.getConnection(dbConfig);
        const result = await connection.execute('SELECT * FROM Admission ORDER BY ID');
        res.json(result.rows.map(row => ({
            id: row[0],
            patientID: row[1],
            roomNumber: row[2],
            admitDate: row[3].toISOString(),
            dischargeDate: row[4] ? row[4].toISOString() : null,
        })));
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Failed to fetch admissions' });
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
});

// PUT - Update Admission by ID
app.put('/api/admissions/:id', async (req, res) => {
    const admissionId = req.params.id;
    const { id, patientID, roomNumber, admitDate, dischargeDate } = req.body;
    let connection;

    try {
        connection = await oracledb.getConnection(dbConfig);

        const formattedAdmitDate = new Date(admitDate).toISOString().slice(0, 19).replace('T', ' ');
        const formattedDischargeDate = dischargeDate ? new Date(dischargeDate).toISOString().slice(0, 19).replace('T', ' ') : null;

        const result = await connection.execute(
            `UPDATE Admission SET 
                ID = :1, 
                Patient_ID = :2, 
                Room_Number = :3, 
                Admit_date = TO_TIMESTAMP(:4, 'YYYY-MM-DD HH24:MI:SS'), 
                Discharge_date = ${formattedDischargeDate ? "TO_TIMESTAMP(:5, 'YYYY-MM-DD HH24:MI:SS')" : "NULL"} 
            WHERE ID = :6`,
            formattedDischargeDate ? [id, patientID, roomNumber, formattedAdmitDate, formattedDischargeDate, admissionId] : [id, patientID, roomNumber, formattedAdmitDate, admissionId],
            { autoCommit: true }
        );

        if (result.rowsAffected === 0) {
            return res.status(404).json({ error: 'Admission not found' });
        }

        res.json({ message: 'Admission updated successfully' });
    } catch (error) {
        console.error('Error updating admission:', error);
        res.status(500).json({ error: 'Failed to update admission' });
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
});

// DELETE - Delete Admission by ID
app.delete('/api/admissions/:id', async (req, res) => {
    const admissionId = req.params.id;
    let connection;

    try {
        connection = await oracledb.getConnection(dbConfig);
        const result = await connection.execute(
            `DELETE FROM Admission WHERE ID = :1`,
            [admissionId],
            { autoCommit: true }
        );

        if (result.rowsAffected === 0) {
            return res.status(404).json({ error: 'Admission not found' });
        }

        res.json({ message: 'Admission deleted successfully' });
    } catch (error) {
        console.error('Error deleting admission:', error);
        res.status(500).json({ error: 'Failed to delete admission' });
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
});







// app.post('/add/prescription-treatment', async (req, res) => {
//     const { prescription_id, treatment_id } = req.body;

//     try {
//         const connection = await oracledb.getConnection(dbConfig);
//         await connection.execute(
//             `INSERT INTO Prescription_Treatment (Prescription_ID, Treatment_ID) 
//              VALUES (:prescription_id, :treatment_id)`,
//             { prescription_id: parseInt(prescription_id), treatment_id: parseInt(treatment_id) },
//             { autoCommit: true }
//         );
//         await connection.close();

//         res.send('Prescription and Treatment linked successfully');
//     } catch (err) {
//         console.error(err);
//         res.status(500).send('Error linking prescription and treatment');
//     }
// });

// // GET - Fetch all Prescription-Treatment Links
// app.get('/get/prescription-treatment', async (req, res) => {
//     let connection;

//     try {
//         connection = await oracledb.getConnection(dbConfig);
//         const result = await connection.execute('SELECT * FROM Prescription_Treatment');
//         res.json(result.rows.map(row => ({
//             prescription_id: row[0],
//             treatment_id: row[1],
//         })));
//     } catch (error) {
//         console.error(error);
//         res.status(500).json({ error: 'Failed to fetch Prescription-Treatment links' });
//     } finally {
//         if (connection) {
//             try {
//                 await connection.close();
//             } catch (err) {
//                 console.error('Error closing connection:', err);
//             }
//         }
//     }
// });

// // GET - Fetch Prescription-Treatment Link by Prescription ID or Treatment ID
// app.get('/get/prescription-treatment/:id', async (req, res) => {
//     const { id } = req.params;
//     let connection;

//     try {
//         connection = await oracledb.getConnection(dbConfig);
//         const result = await connection.execute(
//             `SELECT * FROM Prescription_Treatment WHERE Prescription_ID = :1 OR Treatment_ID = :1`,
//             [id]
//         );

//         if (result.rows.length > 0) {
//             res.json(result.rows.map(row => ({
//                 prescription_id: row[0],
//                 treatment_id: row[1],
//             })));
//         } else {
//             res.status(404).send('No matching data found');
//         }
//     } catch (error) {
//         console.error(error);
//         res.status(500).json({ error: 'Failed to fetch Prescription-Treatment link' });
//     } finally {
//         if (connection) {
//             try {
//                 await connection.close();
//             } catch (err) {
//                 console.error('Error closing connection:', err);
//             }
//         }
//     }
// });

// // DELETE - Delete Prescription-Treatment Link by Composite Keys
// app.delete('/delete/prescription-treatment/:prescription_id/:treatment_id', async (req, res) => {
//     const { prescription_id, treatment_id } = req.params;
//     let connection;

//     try {
//         connection = await oracledb.getConnection(dbConfig);
//         const result = await connection.execute(
//             'DELETE FROM Prescription_Treatment WHERE Prescription_ID = :1 AND Treatment_ID = :2',
//             [prescription_id, treatment_id],
//             { autoCommit: true }
//         );

//         if (result.rowsAffected > 0) {
//             res.json({ message: 'Link deleted successfully' });
//         } else {
//             res.status(404).json({ error: 'Link not found' });
//         }
//     } catch (error) {
//         console.error(error);
//         res.status(500).json({ error: 'Failed to delete Prescription-Treatment link' });
//     } finally {
//         if (connection) {
//             try {
//                 await connection.close();
//             } catch (err) {
//                 console.error('Error closing connection:', err);
//             }
//         }
//     }
// });





// GET - Fetch all Prescription-Treatment Links
// app.get('/api/prescription-treatments', async (req, res) => {
//     let connection;
//     try {
//         connection = await oracledb.getConnection(dbConfig);
//         const result = await connection.execute('SELECT * FROM Prescription_Treatment');
//         res.json(result.rows.map(row => ({
//             prescription_id: row[0],
//             treatment_id: row[1],
//         })));
//     } catch (error) {
//         console.error(error);
//         res.status(500).json({ error: 'Failed to fetch Prescription-Treatment links' });
//     } finally {
//         if (connection) {
//             try {
//                 await connection.close();
//             } catch (err) {
//                 console.error('Error closing connection:', err);
//             }
//         }
//     }
// });

// DELETE - Delete Prescription-Treatment Link
// app.delete('/delete/prescription-treatment', async (req, res) => {
//     const { prescription_id, treatment_id } = req.body;
//     let connection;
//     try {
//         connection = await oracledb.getConnection(dbConfig);
//         const result = await connection.execute(
//             'DELETE FROM Prescription_Treatment WHERE Prescription_ID = :1 AND Treatment_ID = :2',
//             [prescription_id, treatment_id],
//             { autoCommit: true }
//         );

//         if (result.rowsAffected > 0) {
//             res.json({ message: 'Link deleted successfully' });
//         } else {
//             res.status(404).json({ error: 'Link not found' });
//         }
//     } catch (error) {
//         console.error(error);
//         res.status(500).json({ error: 'Failed to delete Prescription-Treatment link' });
//     } finally {
//         if (connection) {
//             try {
//                 await connection.close();
//             } catch (err) {
//                 console.error('Error closing connection:', err);
//             }
//         }
//     }
// });

// POST - Add Prescription-Treatment Link
// app.post('/add/prescription-treatment', async (req, res) => {
//     const { prescription_id, treatment_id } = req.body;
//     let connection;
//     try {
//         connection = await oracledb.getConnection(dbConfig);
//         await connection.execute(
//             'INSERT INTO Prescription_Treatment (Prescription_ID, Treatment_ID) VALUES (:1, :2)',
//             [prescription_id, treatment_id],
//             { autoCommit: true }
//         );

//         res.status(201).json({ message: 'Prescription-Treatment link added successfully' });
//     } catch (error) {
//         console.error(error);
//         res.status(500).json({ error: 'Failed to add Prescription-Treatment link' });
//     } finally {
//         if (connection) {
//             try {
//                 await connection.close();
//             } catch (err) {
//                 console.error('Error closing connection:', err);
//             }
//         }
//     }
// });







// Register Admin
app.post('/admin/register', async (req, res) => {
    const { username, email, password } = req.body;

    if (!username || !email || !password) {
        return res.status(400).json({ success: false, message: 'All fields are required' });
    }

    try {
        const hashedPassword = await bcrypt.hash(password, 10); // Hash password
        const connection = await oracledb.getConnection(dbConfig);
        const result = await connection.execute(
            `INSERT INTO admins (username, email, password) VALUES (:username, :email, :password)`,
            { username, email, password: hashedPassword },
            { autoCommit: true }
        );
        res.json({ success: true, message: 'Admin registered successfully' });
        await connection.close();
    } catch (error) {
        console.error(error);
        res.status(500).json({ success: false, message: 'Error registering admin' });
    }
});


// Login Admin
app.post('/admin/login', async (req, res) => {
    const { email, password } = req.body;

    if (!email || !password) {
        return res.status(400).json({ success: false, message: 'Email and password are required' });
    }

    try {
        const connection = await oracledb.getConnection(dbConfig);
        const result = await connection.execute(
            `SELECT * FROM admins WHERE email = :email`,
            { email }
        );

        const admin = result.rows[0];
        if (!admin) {
            return res.status(401).json({ success: false, message: 'Invalid email or password' });
        }

        const passwordMatch = await bcrypt.compare(password, admin[3]); // Compare hashed password
        if (!passwordMatch) {
            return res.status(401).json({ success: false, message: 'Invalid email or password' });
        }

        res.json({ success: true, message: 'Login successful', admin: { id: admin[0], username: admin[1], email: admin[2] } });
        await connection.close();
    } catch (error) {
        console.error(error);
        res.status(500).json({ success: false, message: 'Error logging in' });
    }
});




//for test


// Get all lab tests

  

// Get all lab tests
app.get('/api/lab-tests', async (req, res) => {
    let connection;
    try {
        connection = await oracledb.getConnection(dbConfig);
        const result = await connection.execute(
            `SELECT l.id, l.test_name, l.test_description, l.test_date, 
                    l.test_result, l.prescription_id
             FROM lab_tests l
             LEFT JOIN prescription p ON l.prescription_id = p.id
             ORDER BY l.id DESC`,
            [],
            { outFormat: oracledb.OUT_FORMAT_OBJECT }
        );
        res.json(result.rows);
    } catch (error) {
        console.error('Error fetching lab tests:', error);
        res.status(500).json({ error: 'Failed to fetch lab tests' });
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
});

// Get lab test by ID
app.get('/api/lab-tests/:id', async (req, res) => {
    const labTestId = req.params.id;
    let connection;
    
    try {
        connection = await oracledb.getConnection(dbConfig);
        const result = await connection.execute(
            `SELECT * FROM lab_tests WHERE id = :id`,
            [labTestId],
            { outFormat: oracledb.OUT_FORMAT_OBJECT }
        );
        
        if (result.rows.length === 0) {
            return res.status(404).json({ error: 'Lab test not found' });
        }
        
        res.json(result.rows[0]);
    } catch (error) {
        console.error('Error fetching lab test:', error);
        res.status(500).json({ error: 'Failed to fetch lab test' });
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
});

// Add new lab test
app.post('/api/lab-tests', async (req, res) => {
    const { test_name, test_description, test_result, prescription_id } = req.body;
    
    if (!test_name) {
        return res.status(400).json({ error: 'Test name is required' });
    }
    
    let connection;
    try {
        connection = await oracledb.getConnection(dbConfig);
        
        // Check if prescription exists if prescription_id is provided
        if (prescription_id) {
            const prescriptionCheck = await connection.execute(
                `SELECT id FROM prescription WHERE id = :id`,
                [prescription_id]
            );
            
            if (prescriptionCheck.rows.length === 0) {
                return res.status(400).json({ error: 'Prescription not found' });
            }
        }
        
        // Get next value from sequence
        const seqResult = await connection.execute(
            `SELECT lab_tests_Seq.NEXTVAL FROM dual`
        );
        const newId = seqResult.rows[0][0];
        
        // Insert new lab test
        await connection.execute(
            `INSERT INTO lab_tests (
                id, test_name, test_description, test_result, prescription_id
            ) VALUES (
                :id, :test_name, :test_description, :test_result, :prescription_id
            )`,
            {
                id: newId,
                test_name: test_name,
                test_description: test_description,
                test_result: test_result,
                prescription_id: prescription_id || null
            },
            { autoCommit: true }
        );
        
        res.status(201).json({
            message: 'Lab test added successfully',
            id: newId,
            test_name,
            test_description,
            test_result,
            prescription_id
        });
    } catch (error) {
        console.error('Error adding lab test:', error);
        res.status(500).json({ error: 'Failed to add lab test' });
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
});

// Update lab test
app.put('/api/lab-tests/:id', async (req, res) => {
    const labTestId = req.params.id;
    const { test_name, test_description, test_result, prescription_id } = req.body;
    
    if (!test_name) {
        return res.status(400).json({ error: 'Test name is required' });
    }
    
    let connection;
    try {
        connection = await oracledb.getConnection(dbConfig);
        
        // Check if lab test exists
        const labTestCheck = await connection.execute(
            `SELECT id FROM lab_tests WHERE id = :id`,
            [labTestId]
        );
        
        if (labTestCheck.rows.length === 0) {
            return res.status(404).json({ error: 'Lab test not found' });
        }
        
        // Check if prescription exists if prescription_id is provided
        if (prescription_id) {
            const prescriptionCheck = await connection.execute(
                `SELECT id FROM prescription WHERE id = :id`,
                [prescription_id]
            );
            
            if (prescriptionCheck.rows.length === 0) {
                return res.status(400).json({ error: 'Prescription not found' });
            }
        }
        
        // Update lab test
        await connection.execute(
            `UPDATE lab_tests SET
                test_name = :test_name,
                test_description = :test_description,
                test_result = :test_result,
                prescription_id = :prescription_id
            WHERE id = :id`,
            {
                test_name: test_name,
                test_description: test_description,
                test_result: test_result,
                prescription_id: prescription_id || null,
                id: labTestId
            },
            { autoCommit: true }
        );
        
        res.json({
            message: 'Lab test updated successfully',
            id: labTestId,
            test_name,
            test_description,
            test_result,
            prescription_id
        });
    } catch (error) {
        console.error('Error updating lab test:', error);
        res.status(500).json({ error: 'Failed to update lab test' });
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
});

// Delete lab test
app.delete('/api/lab-tests/:id', async (req, res) => {
    const labTestId = req.params.id;
    let connection;
    
    try {
        connection = await oracledb.getConnection(dbConfig);
        
        // Delete lab test
        const result = await connection.execute(
            `DELETE FROM lab_tests WHERE id = :id`,
            [labTestId],
            { autoCommit: true }
        );
        
        if (result.rowsAffected === 0) {
            return res.status(404).json({ error: 'Lab test not found' });
        }
        
        res.json({ message: 'Lab test deleted successfully' });
    } catch (error) {
        console.error('Error deleting lab test:', error);
        res.status(500).json({ error: 'Failed to delete lab test' });
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
});


// Serve the 'uploads' folder
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// Serve static files from the 'public' folder
app.use(express.static(path.join(__dirname, 'public')));

// Serve about_us.html from the public folder
app.get('/about_us', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'about_us.html'));
});


// Initialize server
const initializeServer = async () => {
    let connection;
    try {
        connection = await oracledb.getConnection(dbConfig);
        await createTables();
        await createSequences(connection);
        console.log('Database initialized successfully');
    } catch (error) {
        console.error('Error initializing server:', error);
        process.exit(1);
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('Error closing connection:', err);
            }
        }
    }
};

app.listen(port, async () => {
    await initializeServer();
    console.log(`Server running at http://localhost:${port}`);
});